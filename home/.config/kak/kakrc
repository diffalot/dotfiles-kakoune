## Kakoune Configuration
## https://github.com/mawww/kakoune/wiki
########################################
#
# todo:
# - change status bar BG to show modes
#     - red, pink, orange for insert
#     - blue or greeen for normal
#     - control tmux status bar bg for more visual info
# - rename tmux session to base name of current directory ?
# - show current filename as editor window title in tmux status bar
# - setup new tmux keymaps that compliment vi home row pane switching
# - F10 Code Analysis
#     - c => ctags
#     - t => syntax tree
# - F1 The Fucking Manuals
#     - prompt for query or fall back to selectionq/
#     - provide 'selection template string' 
#     - :doc-search
#     - man
#     - google search
#     - stash a bunch of crap and fzf it in narrower loopsr

# File format hooks are mainly set here, but will also be tabs in smarttab.kak
# if they deviate from the global default of always expanding a four space base
# tab size that is set in Smarttab
#hook global WinSetOption filetype=fish {
#    set-option lint
#}


## Functions Before Mappings (I think...)
## ========================================================--------------------   

#def -allow-override space-fn %{
def space-fn %{
    %sh{
    	categories=()
    	keys=()
        cmds=()
        infos=()
        IFS=,
        while IFS=, read key cmd info; do
        	keys+=($key)
                cmds+=($cmd)
                infos+=($info)
        done < ~/.config/kak/spacefun.csv

	infopopup=""
        for ((i=0;i<${#keys[@]};++i)); do
            printf -v line "%s:    %s\n" "${keys[i]}" "${infos[i]}"
            infopopup+=$line
        done
        echo $SHELL
        echo "info \"$infopopup\""

	onkey='on-key %{%sh{ case $kak_key in'
        for ((i=0;i<${#keys[@]};++i)); do
            printf -v line "(%s) %s ;;" "${keys[i]}" "${cmds[i]}"
            onkey+=$line
        done
        onkey+='esac}}'
        echo "$onkey"
    }
}

# Mappings
#=========

# <space> is my leader
map global normal <space> , -docstring 'leader'
map global normal <backspace> <space> -docstring 'back to one selection'
map global normal <a-backspace> <a-space> -docstring 'remove each selection'

# Modes and Menus
map global user l %{: enter-user-mode lsp<ret>} -docstring "Language Server Mode"
map global user f %{: fzf-mode<ret>} -docstring "Fuzzy Finder Mode"
map global user t %{: kaktree-toggle<ret>} -docstring "KakTree Toggle On/Off"

    # Code Analysis
map global user o ':cscope ' -docstring 'Find tag with cscope'

# Code Collaboration
map global user <F7> ': git status -bs<ret>' -docstring 'git status'

# New Panes TODO: allow them to take arguments and override defaults
map global user V %{: tmux-terminal-vertical kak -c %val{session} <space><ret> } -docstring "New Kakoune Below"
map global user > %{: tmux-terminal-horizontal kak -c %val{session} <space><ret> } -docstring "New Kakoune to Right"
map global user v %{: tmux-terminal-vertical fish<ret> } -docstring "New Terminal Below"
map global user . %{: tmux-terminal-horizontal fish<ret> } -docstring "New Terminal to Right"

# Open  Wiki
map -docstring "Open Docs" global user d %{: tmux-terminal-horizontal kak -c %val{session} -E ': wiki docs/index.md' <space><ret> }
map -docstring "Open Journal" global user w %{: tmux-terminal-horizontal kak -c %val{session} -E ': wiki journal/index.md' <space><ret> }

# kak administration
map -docstring "Edit ~/.config/kak/kakrc" global user e ":edit ~/.config/kak/kakrc<ret>"
map -docstring "Source ~/.config/kak/kakrc" global user r ":source ~/.config/kak/kakrc<ret>"

# Editing

map -docstring "Wrap selection with par w79p2fr" global user p '|par w79p2fr<ret>'

# this and the whole space-fn are probably not needed, but I'm keeping them
# until I figure out how to run bash, dash, or zsh as Kakoune's shell
map global user <c-space> -docstring "Show space help" :space-fn<ret>

#def -params 1 extend-line-down %{
#  exec "<a-:>%arg{1}X"
#}
#def -params 1 extend-line-up %{
#  exec "<a-:><a-;>%arg{1}K<a-;>"
#  try %{
#    exec -draft ';<a-K>\n<ret>'
#    exec X
#  }
#  exec '<a-;><a->
#
#  #map global normal X ':extend-line-down %val{count}<retn  
#map global normal x ':extend-line-up %val{count}<retn  


# General Editing Settings  
# ========================

colorscheme second-light

set-option global scrolloff 3,7

# Default Highlights
# ==================

add-highlighter global/ show-matching
#add-highlighter global/ show-whitespaces
add-highlighter global/ dynregex '%reg{/}' 0:+u
hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines -hlcursor
    beryl-add-`band 80 1
    beryl-vivify-cursor
    beryl-enable-changing-cursor

    set-face global Comment+i
}


# Change cursor color in insert mode:
hook global ModeChange insert:.* %{
    #set-face global StatusLine      cyan,default
}
hook global ModeChange .*:insert %{
    #set-face global StatusLine      rgb:696969,rgb:f0e68c
}

# Highlight the word under the cursor
declare-option -hidden regex curword
set-face global CurWord default,rgb:999999
set-face global CurWord rgb:442233,rgb:fda134+b
hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>\A\w+\z<ret>
        set-option buffer curword "\b\Q%val{selection}\E\b"
    } catch %{
        set-option buffer curword ''
    } }
}
add-highlighter global/ dynregex '%opt{curword}' 0:CurWord

# Plugins
# =======

# plug
# https://github.com/andreyorst/plug.kak
# --------------------------------------
evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

# Language Server Protocol
# https://github.com/kak-lsp/kak-lsp
# ----------------------------------
plug "ul/kak-lsp" do %{
  cargo build --release --locked
  cargo install --force --path .
} config %{

    # there's a wiki on GitHub:
    # https://github.com/kak-lsp/kak-lsp/wiki

    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    # this is not necessary; the `lsp-enable-window` will take care of it
    # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}
    #
    # errors can be redirected for easier debugging:
    # define-command -override -hidden lsp-show-error -params 1 -docstring "Render error" %{
    #     echo -debug "kak-lsp:" %arg{1}
    # }

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-enable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window
    }

    hook global WinSetOption filetype=(rust) %{
        set window lsp_server_configuration rust.clippy_preference="on"
    }

    hook global WinSetOption filetype=rust %{
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global KakEnd .* lsp-exit
}

# Filetypes to Analyze
hook global WinSetOption filetype=(rust|python|javascript|typescript|bash|deno) %{
  lsp-enable-window
}

# Filetypes to Format on Save
hook global WinSetOption filetype=(rust|python|javascript|typescript|bash|deno) %{
  hook window BufWritePre .* lsp-formatting-sync
}

# Inlay Hints for Rust Analyzer
# https://github.com/kak-lsp/kak-lsp#inlay-hints-for-rust-analyzer
hook global WinSetOption filetype=rust %{
  hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
  hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
  hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
  hook -once -always window WinSetOption filetype=.* %{
    remove-hooks window rust-inlay-hints
  }
}

# Semantic Tokens
# https://github.com/kak-lsp/kak-lsp#semantic-tokens
#hook global WinSetOption filetype=<language> %{
#    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
#    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
#    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
#    hook -once -always window WinSetOption filetype=.* %{
#	remove-hooks window semantic-tokens
#    }
#}

# Inlay Diagnostics
# https://github.com/kak-lsp/kak-lsp#inlay-diagnostics
# kak-lsp supports showing diagnostics inline after their respective line, but
# this behaviour can be somewhat buggy and must be enabled explicitly:
# lsp-inlay-diagnostics-enable global

# Snippets
# https://github.com/kak-lsp/kak-lsp#snippets
def -hidden insert-c-n %{
     try %{
            lsp-snippets-select-next-placeholders
               exec '<a-;>d'
     } catch %{
            exec -with-hooks '<c-n>'
     }
}
map global insert <c-n> "<a-;>: insert-c-n<ret>"

## Language Helpers
###################========================================--------------------

# JavaScript TypeScript
# https://github.com/schemar/kak-jsts
# -----------------------------------
# npm i -g eslint-formatter-kakoune
# brew install jq
# -----------------------------------
plug "schemar/kak-jsts" config %{
    hook global WinSetOption filetype=(javascript|typescript) %{
        map window user l -docstring 'lint' ': lint<ret>'
        map window user f -docstring 'format' ': format-eslint<ret>'
        
        # If you want to format before every write, you could do s.th. like this:
        hook window BufWritePre .* %{
            evaluate-commands -no-hooks %{
                format-eslint
            }
        }
    }
}


# User Experience
# ###############==============================================================

# New Features
# ============---------------------------------------------

# Vertical Selection
# https://github.com/occivink/kakoune-vertical-selection
# ------------------------------------------------------
plug 'occivink/kakoune-vertical-selection' config %{
    map global normal <c-V> ': vertical-selection-up<ret>'
    map global normal <c-v> ': vertical-selection-down<ret>'
}


# KakTree
# https://github.com/andreyorst/kaktree
# -------------------------------------
plug "andreyorst/kaktree" config %{
    hook global WinSetOption filetype=kaktree %{
        remove-highlighter buffer/numbers
        remove-highlighter buffer/matching
        remove-highlighter buffer/wrap
        remove-highlighter buffer/show-whitespaces
    }
    kaktree-enable
}

# SideTree
# https://github.com/topisani/sidetree
# ------------------------------------
plug 'topisani/sidetree'

# Kakoune Wiki
# https://github.com/TeddyDD/kakoune-wiki
#-----------------------------------------
plug 'TeddyDD/kakoune-wiki'
wiki-setup %sh{ echo $HOME/cronofiles }

# Git Porcelain
# https://github.com/chambln/kakoune-kit
# --------------------------------------
plug 'chambln/kakoune-kit' config %{
    hook global WinSetOption filetype=git-status %{
        map window normal c ': git commit --verbose '
        map window normal l ': git log --oneline --graph<ret>'
        map window normal d ': -- %val{selections}<a-!><home> git diff '
        map window normal D ': -- %val{selections}<a-!><home> git diff --cached '
        map window normal a ': -- %val{selections}<a-!><home> git add '
        map window normal A ': -- %val{selections}<a-!><home> repl git add -p '
        map window normal r ': -- %val{selections}<a-!><home> git reset '
        map window normal R ': -- %val{selections}<a-!><home> repl git reset -p '
        map window normal o ': -- %val{selections}<a-!><home> git checkout '
    }
    hook global WinSetOption filetype=git-log %{
        map window normal d     ': %val{selections}<a-!><home> git diff '
        map window normal <ret> ': %val{selections}<a-!><home> git show '
        map window normal r     ': %val{selections}<a-!><home> git reset '
        map window normal R     ': %val{selections}<a-!><home> repl git reset -p '
        map window normal o     ': %val{selections}<a-!><home> git checkout '
    }
}

# Kak ANSI
# https://github.com/eraserhd/kak-ansi
# ------------------------------------
plug 'eraserhd/kak-ansi' do %{
    make
}

# fzf.kak
# https://github.com/andreyorst/fzf.kak
# -------------------------------------
plug 'andreyorst/fzf.kak'

# Palette.kak
# https://github.com/alexherbo2/palette.kak
# -----------------------------------------
plug "alexherbo2/palette.kak"

# TODO: Setup with a user mode shortcut
# kakoune-registers
# https://github.com/Delapouite/kakoune-registers
# -----------------------------------------------
plug 'delapouite/kakoune-registers'

## kakoune-buffers
## https://github.com/Delapouite/kakoune-buffers
## ---------------------------------------------
#plug 'delapouite/kakoune-buffers' %{
#    #map global normal ^ q
#  #map global normal <a-^> Q
#
#  #map global normal q b
#  #map global normal Q B
#  #map global normal <a-q> <a-b>
#  #map global normal <a-Q> <a-B>
#  #map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
#  #map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
#}

# sudo write
# https://github.com/occivink/kakoune-sudo-write
# ----------------------------------------------
plug 'occivink/kakoune-sudo-write'

# kakboard
# https://github.com/lePerdu/kakboard
# -----------------------------------
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable } 
}

# TagBar
# https://github.com/andreyorst/tagar.kak
# ---------------------------------------`
plug 'andreyorst/tagbar.kak'

# C-Scope
# https://github.com/yveoch/kakoune-cscope
# ----------------------------------------
# Build an index: :cscope-index
# Make a lookup: :cscope
# Fuzzy-find a function: :cscope-find
# Optional mapping: `map -docstring 'cscope menu' global user 'c' 'w:cscope-menu'
plug 'yveoch/kakoune-cscope'

# Smarttab
# https://github.com/andreyorst/smarttab.kak
# ------------------------------------------
# noexpandtab - use tab for everything. Tab will insert \t character, and
# > will use \t character wd en indenting. Aligning cursors with & uses \t
# character.

# expandtab - use space for everything. Tab will insert %opt{indentwidth}
# amount of spaces, and > will indent with spaces.
#
# smarttab - indent with tab, align with space. Tab will insert \t character
# if your cursor is inside indentation area, e.g. before any non-whitespace
# character, and insert spaces if cursor is after any non-whitespace character.
# Aligning cursors with & uses space.
plug "andreyorst/smarttab.kak" defer smarttab %{
    expandtab
    # global indentwidth and smarttab have already been set to 4

    # when smarttab is loaded it will become compatible with these settings
    set-option global indentwidth 4
    # when `backspace' is pressed, 4 spaces are deleted at once
    set-option global softtabstop 4

} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(fish|rust|markdown|kak|lisp|scheme|sh|perl) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
    # these languages will use `smarttab' behavior
    hook global WinSetOption filetype=(c|cpp) smarttab

    hook global WinSetOption filetype= %{
        set-option buffer lintcmd 'fish --no-execute'
	set-option window formatcmd 'fish_indent'
    }
    hook global WinSetOption filetype=(kaktree|kakrc%{
        #add-highlighter buffer/numbers
        #add-highlighter buffer/matching
        #add-highlighter buffer/show-whitespaces
        #add-highlighter buffer/wrap
    }
}

# I don't know where to put thes, so lt's seee what happens''
#add-highlighter global/numbers
#add-highlighter global/matching
#add-highlighter global/wrap
#add-highlighter global/show-whitespaces

## Status Lines
## ============---------------------------------------------
#
## Kakship (status line)
## https://github.com/eburghar/kakship
## -----------------------------------
#plug "eburghar/kakship" do %{
#    	cargo install --force --path . --root ~/.local
#    		[ ! -e $kak_config/starship.toml ] && cp starship.toml $kak_config/
#} config %{
#    	#kakship-enable
#}
#
## Powerline.kak
## https://github.com/andreyorst/powerline.kak
## -------------------------------------------
#plug "andreyorst/powerline.kak" defer powerline_gruvbox %{
#        powerline-theme gruvbox
#} config %{
#        #powerline-start
#}
#

# Colorschemes
# ============---------------------------------------------

# One (light, dark, and darker) [kak-lsp, kakoune-phantom-selection]
# https://github.com/raiguard/one.kak
# -----------------------------------
plug "raiguard/one.kak" theme config %{
    #colorscheme one-light
}
# base16 Gruvbox
# https://github.com/andreyorst/base16-gruvbox.kak
# ------------------------------------------------
plug "andreyorst/base16-gruvbox.kak" theme config %{
    #colorscheme base16-gruvbox-dark-soft # or any other variant
}
            
# Second Light 
plug 'vbauerster/second-light' theme

# Primer
plug "evanrelf/primer.kak" theme config %{
    #colorscheme primer
}

# INSTALL UNVERIFIED

# Kakoune Themes (with transparency)
# https://github.com/anhsirk0/kakoune-themes
# ------------------------------------------
plug "anhsirk0/kakoune-themes" theme

########### UNSORTED
# https://github.com/caksoylar/kakoune-mysticaltutor
plug 'caksoylar/kakoune-mysticaltutor' theme

# https://github.com/TeddyDD/kakoune-selenizedplug
plug 'TeddyDD/kakoune-selenized' theme
#
plug 'Jackojc/ultrasonic' theme
#
plug 'icantjuddle/ayu-kak' theme
# https://github.com/Icantjuddle/ayu-kak
#
plug 'ftonneau/beryl.kak' theme
# https://github.com/ftonneau/beryl.kak.git
#
plug 'gustavo-hms/garbo' theme
# https://github.com/gustavo-hms/garbo
#
plug 'codymlewis/torchwood' theme
# https://github.com/codymlewis/torchwood
#
plug 'caksoylar/kakoune-snow' theme
# https://github.com/caksoylar/kakoune-snow
#
plug 'dracula/kakoune' theme
# https://draculatheme.com/kakoune
# https://github.com/dracula/kakoune
#
plug 'Delapouite/kakoune-colors' theme
# https://github.com/Delapouite/kakoune-colors
# 
